##Base 笔记
- let var=123  。。code。。 end  #定义局部作用域
- isnull() && continue  #特殊用法
- ex=quote x=1end  #怎末用？
- where  限定类型的范围
	Pair{T, S} where {T<:Number, S<:Array{T}}
- add(x...)=reduce(+,x)  # ...用法，和reduce的使用
- Base.Iterators
- Base.Libc ：c标准库
- Base.Meta : 元编程
- Base.Sys ：硬件和系统信息
- Base.Threads ：多线程支持
- Base.GC ：垃圾回收
- “===” ：全等包括id
- 类型测试： isa（123,Int）
- isequal（）
- ifelse(condition,true,false)
- objectid() :查看对象id
- hash() : 计算对象的整型hash值
- finalizer  ？？？？
- copy，deepcopy
- isdefined(Base, :sum)
- convert(Int, 3.0)
- isstructtype
- field:类型内的成员变量
- 2^64 == 0 : true 上溢出 
- [1,2,3,4] |> sum 
- @inline
- retry()
- pathof(module)
- unique([]) 去重

函数是编程神奇：
- reduce((x,y) -> (x+y)*(x-y),[1,2,3,4,5])
- extrema(1:10) :1,10 最小值和最大值
- mapreduce(x->x^2, +, [1:3;])
- filter（）  replace（）
- zip enumerate	reverse

string
- codepoint() 字符的整型表示
- length  sizeof
- repr ：字符化表示
- isvalid(Char(0xd800))
- eachmatch
- occursin
- startdwith endswith
- lowercase(uppercase("asd"))
- titlecase() : 首字母大些
- join（str_array,","）
- chop("march", head = 1, tail = 2)
- chomp("Hello\n") :删除行尾的换行符号
- escape_string : 转义字符串

array
- vector，array，Matrix，bitarray
- zeros ones trues false fill similar vec
- ndims size axes length Dims car vcat hcat
- checkbounds checkindex findall findfirst/last/next/prev
- view @view views accumulate cumsum diff repeat rot180
- reverse 
- inv ：倒数
- 
	abstract type Number end
	mutable struct name{T} <: Number
		x::T
		y::Float64
	end
	
task:
- @task yield yieldto Channel put! take! isready fetch close bind asyncmap 
- IOBuffer() isopen() isreadable

#标准库
today() now()
Distributed : nworkers() nprocs() pmap() @async @sync 
	addprocs(4)
	F=@spawn function() :Create a closure around an expression and run it on an automa cally-chosen process
	fetch(f)
apropos() **varinfo(Main)**:查看模块内的函数
@functionloc log2（4）  ： 查看调用函数的位置
@debug , @info , @warn and @error

日志：
	using Logging
	io = open("log.txt", "w+")
	logger = SimpleLogger(io)
	global_logger(logger)
	flush(io)
	close(io)
	
	LogLevel(level）
	
Profile:
	using Profile
	@profile function()
	Profile.print()
	
交互环境三种模式：
	1、julia
	2、？ 帮助
	3、； shell
	4、] Pkg
using Statistics
	
 
## 在交互环境下 : 
- 英文分号 进入shell模式
- 英文问好 进入帮助模式
- Ctrl+D :退出
- Ctrl+C : 中断

##查看函数定义
- @less func()
## 查看父类子类
supertype()   subtypes()
##大数字
BigInt()  BigFloat()
## 
	Any  # all objects are of this type
	Union{} # subtype of all types, no object can have this type
	Void  # type indicating nothing, subtype of Any
	nothing # only instance of Void
# 4.4 array
Array{Any}([1,2,3])  #任意类型可变数组
zeros(5) # vector of Float64 zeros
ones(5) # vector of Float64 ones
ones(Int64, 2, 1) # 2x1 array of Int64 ones
trues(3), falses(3) # tuple of vector of trues and of falses
collect(iter) #将迭代内容转为数组
1:3:100  #1->100间隔为3
reshape(1:12,3,4): 3行4列
fill("a",2,3)  #用a填满一个 2*3的矩阵
array'  #数组转置
resize!(x,5)  #将x变为5个元素的数组
[1 2 3;4 5 6] #二维矩阵
ndim(array) #查看数组维度
eltype()  #元素类型
size()
vec(array) #将数组转化为一维向量
sum(array,dims=1,2...)
count(x-> x==3 ,asd)  #计算x等于3的元素数量
view(asd,1:2:8)
array[:,3:4] #所有行,3-4列的元素
copy() 浅复制;deepcopy() 深复制;
struct #可变类型  fieldnames() 查看结构体内容
Union{Int,String} #联合体:存储两个类型中的一个
delete!(dict,"key")  #删除字典中的键为key的元素

#string
""*"" :串连接
""^3 :重复3次
repr()  : 串表示
#读写
- readdlm writedlm| readcsv writecsv
## 随机数
-  srand(11) #设置随机数种子
- rand(3,4) :随机矩阵
- rand(1:5,10):10个1-5之间的随机数
- randn(10) : 10个成正太(高斯)分布的随机数
- run('ls')  #反单引号
- @which 1+1   查看调用的是那个文件的那个方法
- @inbounds  牺牲数组的边界检查来提升速度
- @goto  @label  :与C中的goto相同
- 数字分割符号: 1000_0000
## 测试模块
- using Test @test 1==1
## 文件操作
- readline | readlines | eachline
##性能分析 using Profile
- @profile
- Profile.clear()
## cheatsheet
- log() :e为底数log2() log10()
- exp() e指数; abs() : 绝对值函数
- 逐元素: array.*3  sin.(array)
- ans: 一个最后计算的值的变量
- abs(3+4im)  => 5 勾股运算
## 调用python
- using PyCall
- @pyimport scipy.special as special

##julia 机器学习
- 元编程——编写用于写代码的代码
- 大多数的库只提供简单的一组函数和数据结构，而不是给一整套新的编程系统和运行时
- Python 的语义从根本上让模型级别的并行化和编译到小型设备这两件事变得很困难。
- 没有几个领域像机器学习这样对语言层面的设计有如此苛刻的要求
- 机器学习是一个数值计算语言的问题
- 我们能创造一个把数值、微分、并行作为基本功能，且毋须牺牲传统的编程理念和智慧的系统吗？
	- 这将是编程语言在接下来十年里需要回答的一个基本问题。
- Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data

##other  
- All basic types are immutable  

- 没有自动类型转换
- isa(1,Int) : 确定元素类型
- methods(func_name) : 查看函数内容  
- (x-> x^2)(3) :匿名函数计算x^2
- map() reduce()  filter() broadcast()
- NaN ===NaN  :true  #id 相等
- isempty()  :查看元素内容是否为空
- indexin()
- current_task()
- isconst()
- Julia 的测试包: Base.runtests().
- 